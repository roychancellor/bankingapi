<?xml version="1.0" encoding="UTF-8"?>
<mule xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:db="http://www.mulesoft.org/schema/mule/db" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation" xmlns:ee="http://www.mulesoft.org/schema/mule/ee/core" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" xsi:schemaLocation="http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd http://www.mulesoft.org/schema/mule/ee/core http://www.mulesoft.org/schema/mule/ee/core/current/mule-ee.xsd">
	<flow name="getCustomerByUsernameFlow" doc:id="50963597-3d51-48fe-8770-d5a7ef7748fe">
        <flow-ref doc:name="CALL getCustomerIdFromUsernameFlow" doc:id="45f24a3b-0a7c-4db9-a44b-7c4a8abfc001" name="getCustomerIdFromUsernameSubflow" />
        <flow-ref doc:name="CALL getCustomerByIdFlow" doc:id="a553b69b-283b-4d07-ae8a-9474b55cb744" name="getCustomerByIdFlow" />
        <logger level="INFO" doc:name="Logger" doc:id="f2ef3736-3de1-49ad-a64d-3d375c9d09b3" />
    </flow>
	<sub-flow name="getCustomerIdFromUsernameSubflow" doc:id="d7c17632-8f74-4d99-bec5-4024687c35ac">
        <db:select doc:name="Select Id From Username" doc:id="efac31fc-8b2b-4930-af63-fc209bbedd68" config-ref="Banking_AWS_Database_Config">
            <db:sql>SELECT ${db.database}.${tables.credentials}.customerId
FROM ${db.database}.${tables.credentials}
WHERE ${db.database}.${tables.credentials}.userName = :uname</db:sql>
            <db:input-parameters><![CDATA[#[{'uname' : attributes.queryParams.username}]]]></db:input-parameters>
        </db:select>
        <ee:transform doc:name="Set customerId" doc:id="7de8544c-829b-4d42-9c12-d820899aa975">
            <ee:message />
            <ee:variables>
                <ee:set-variable variableName="custId"><![CDATA[%dw 2.0
output application/json
---
payload[0].customerId]]></ee:set-variable>
            </ee:variables>
        </ee:transform>
        <logger level="INFO" doc:name="Logger" doc:id="f3b7361d-0700-493b-9b71-06455caa568c" />
    </sub-flow>
	<flow name="getCustomerByIdFlow" doc:id="2320451f-6c64-4f79-8663-0e72cac8c6ab">
        <db:select doc:name="Select Customer By ID" doc:id="059e5eb6-02d3-496b-a56e-decbf5727aed" config-ref="Banking_AWS_Database_Config">
            <db:sql>SELECT ${db.database}.${tables.customers}.customerId, lastName, firstName, email, phone, userName, passwordHash, passwordSalt,
checkingNumber, checkingBalance, savingNumber, savingBalance, loanNumber, loanBalance
FROM ${tables.customers}, ${tables.credentials}, ${tables.accounts}
WHERE ${db.database}.${tables.customers}.customerId = :custId
AND ${db.database}.${tables.credentials}.customerId = :custId
AND ${db.database}.${tables.accounts}.customerId = :custId</db:sql>
            <db:input-parameters><![CDATA[#[{'custId' : vars.custId default attributes.uriParams.id}]]]></db:input-parameters>
        </db:select>
        <ee:transform doc:name="Convert to Customer Dashboard Object" doc:id="ef9c9b0a-b670-4b47-ac1b-55d6a719f8f6">
            <ee:message>
                <ee:set-payload><![CDATA[%dw 2.0
output application/json
var pay = payload[0]
---
{
	customer: {
		custId: pay.customerId,
		firstName: pay.firstName,
		lastName: pay.lastName,
		phoneNumber: pay.phone,
		emailAddress: pay.email,
		userName: pay.userName,
		hashedPassword: pay.passwordHash,
		hashedSalt: pay.passwordSalt
	},
	checking: {
		accountNumber: pay.checkingNumber default "",
		currentBalance: pay.checkingBalance default 0
	},
	saving: {
		accountNumber: pay.savingNumber default "",
		currentBalance: pay.savingBalance default 0
	},
	loan: {
		accountNumber: pay.loanNumber default "",
		currentBalance: pay.loanBalance default 0
	}
}]]></ee:set-payload>
            </ee:message>
        </ee:transform>
        <logger level="INFO" doc:name="Logger" doc:id="c788655a-80c5-4b76-b095-7103a31f3120" />
    </flow>
	<flow name="postCustomersFlow" doc:id="4923b7f1-dcb8-4284-9396-afae7baf665d">
		<foreach doc:name="For Each Customer in Request Body" doc:id="2927956b-6270-4542-94e2-b84f2d0e83bb" >
			<db:insert doc:name="Insert New Customer" doc:id="4e67e93e-d767-4ae2-98f3-9c2b55fe3a92" config-ref="Banking_AWS_Database_Config" autoGenerateKeys="true" target="genKeys">
            <db:sql>INSERT INTO ${db.database}.${tables.customers}
(lastName, firstName, email, phone)
VALUES
(:lastName, :firstName, :email, :phone)</db:sql>
            <db:input-parameters><![CDATA[#[{
firstName: payload.firstName,
lastName: payload.lastName,
phone: payload.phoneNumber,
email: payload.emailAddress
}]]]></db:input-parameters>
			<db:auto-generated-keys-column-indexes>
				<db:auto-generated-keys-column-index value="1" />
			</db:auto-generated-keys-column-indexes>
        </db:insert>
			<set-variable value="#[vars.genKeys.generatedKeys.GENERATED_KEY]" doc:name="Set customerId" doc:id="f4d327db-fdf7-4eb3-8ef3-51f86c6f7d77" variableName="customerId"/>
			<db:insert doc:name="Insert New Customer Credentials" doc:id="9537bdf2-07ba-4920-8002-d077d950f8ff" config-ref="Banking_AWS_Database_Config">
				<db:sql >INSERT INTO ${db.database}.${tables.credentials}
(customerId, userName, passwordSalt, passwordHash)
VALUES
(:customerId, :username, :salt, :hash)</db:sql>
				<db:input-parameters ><![CDATA[#[{
	customerId: vars.customerId,
	username: payload.userName,
	salt: payload.hashedSalt,
	hash: payload.hashedPassword
}]]]></db:input-parameters>
			</db:insert>
			<flow-ref doc:name="CALL createAccountsByCustomerIdSubFlow" doc:id="df8a4096-939c-4586-91a7-8b30c058b5e1" name="createAccountsByCustomerIdSubFlow"/>
		
</foreach>
		<ee:transform doc:name="Transform Message" doc:id="b8abf851-9de0-44b0-9e4c-8297293e8d96" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	message: "Success: " ++ sizeOf(payload) ++ " customer(s) inserted:",
	customers: {(payload map {
		($$): $.firstName ++ " " ++ $.lastName
	})}
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="b45224b2-e3ad-475f-b13f-c37be61e4b43" message="#[payload]" />
    </flow>
	<flow name="updateCustomerByIdFlow" doc:id="0bfd52ea-e7e1-44f1-9090-593f03a1450f" >
		<ee:transform doc:name="Convert PATCH Body to Update Parameters (varUpdate)" doc:id="8a902634-3839-4d48-8445-2afa446687aa" >
			<ee:message >
			</ee:message>
			<ee:variables >
				<ee:set-variable variableName="varUpdate" ><![CDATA[%dw 2.0
output application/java
---
//Makes the input parameters for the SQL UPDATE operation based on the PATCH body
{
	fieldName: payload.path match {
		case "firstname" -> "firstName"
		case "lastname" -> "lastName"
		case "email" -> "email"
		case "phone" -> "phone"
	},
	newValue: payload.value,
	custId: attributes.uriParams.'id' as Number {format: "#"}
}]]></ee:set-variable>
			</ee:variables>
		</ee:transform>
		<set-variable value="#[output application/java
---
&quot;UPDATE ${db.database}.${tables.customers} 
SET $(vars.varUpdate.fieldName) = '$(vars.varUpdate.newValue)' 
WHERE customerId = $(vars.varUpdate.custId)&quot;]" doc:name="Set updateCustomerSQL Statement" doc:id="381818fe-9978-4355-b2cd-d738927226ec" variableName="updateCustomerSQL"/>
		<db:update doc:name="Update Customer Object by Id" doc:id="ecdafcbf-c952-416e-8035-86171324067b" config-ref="Banking_AWS_Database_Config">
			<db:sql >#[vars.updateCustomerSQL]</db:sql>
		</db:update>
		<ee:transform doc:name="Transform Message" doc:id="ca7805fc-2adf-418e-8f7c-1afca1dfde49" >
			<ee:message >
				<ee:set-payload ><![CDATA[%dw 2.0
output application/json
---
{
	message: if (payload.affectedRows > 0) "Customer Id = " ++ vars.varUpdate.custId ++ " updated"
		else "No customer with Id = " ++ vars.varUpdate.custId ++ " found",
	update: if (payload.affectedRows > 0) vars.varUpdate.fieldName ++ " -> " ++ vars.varUpdate.newValue else "Nothing updated"
}]]></ee:set-payload>
			</ee:message>
		</ee:transform>
		<logger level="INFO" doc:name="Logger" doc:id="1f074673-c715-4913-b9ab-b342fda74302" />
	</flow>
</mule>
